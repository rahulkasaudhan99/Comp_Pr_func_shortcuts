#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
// top - down approach
int minsteps(int n, int dp[]){
    //base case
    if(n==1) return 0;
    //if a n is already computed
    if(dp[n]!=0) return dp[n];
    //recursive case compute only if dp[n] is not computed already
    int op1,op2,op3;
    op1=op2=op3=INT_MAX;
    if(n%3==0) op1=minsteps(n/3,dp)+1; 
    if(n%2==0) op2=minsteps(n/2,dp)+1;
    op3=minsteps(n-1,dp)+1; 
    int ans=min(min(op1,op2),op3);

    return dp[n]=ans;
}

// Bottom Up approach
ll minstepsBU(ll n, ll dp[]){
    for(ll i=2;i<=n;i++){
        ll op1,op2,op3;
        op1=op2=op3=INT_MAX;
        if(i%3==0) op1=dp[i/3];
        if(i%2==0) op2=dp[i/2];
        op3=dp[n-1];
        dp[i]=(min(min(op1,op2),op3)) +1;

    }
    return dp[n];
}


int main() {
	ll n;
    cin>>n;
    ll dp[n+1]={0};
    cout<<minsteps(n,dp)<<endl;
    cout<<minstepsBU(n,dp)<<endl;
	
	return 0;
}

