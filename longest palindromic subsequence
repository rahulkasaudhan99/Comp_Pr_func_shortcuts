//min no of insertions or deletion can be obtained by substracting "lps" from length of string   ans=n-lps

//Recursive Approach   O(2^n)
#include<bits/stdc++.h>
using namespace std;
// Returns the length of the longest palindromic subsequence in seq
int lps(char *seq, int i, int j){
// Base Case 1: If there is only 1 character
if (i == j)
    return 1;
 
// Base Case 2: If there are only 2
// characters and both are same
if (seq[i] == seq[j] && i + 1 == j)
    return 2;
 
// If the first and last characters match
if (seq[i] == seq[j])
    return lps (seq, i+1, j-1) + 2;
 
// If the first and last characters do not match
return max( lps(seq, i, j-1), lps(seq, i+1, j) );
}

int main()
{
    char seq[] = "GEEKS FOR GEEKS";
    int n = strlen(seq);
    printf ("The length of the LPS is %d", lps(seq,0,n-1));
    getchar();
    return 0;
}


//Memeoization DP approach 
//same logic in both cases
//O(n^2)
#include<bits/stdc++.h>
using namespace std;
//longest palindromic subsequence
int lps(char* s){
    int n=strlen(s);
    int dp[n][n];
    //string of len 1 is always a palindrome
    for(int i=0;i<n;i++){
        dp[i][i]=1;
    }
    
    for(int l=2;l<=n;l++){
        for(int i=0;i<n-l+1;i++){
            int j=i+l-1;
            //string of len 2 is palindrome if s[i]==s[j]
            if(l==2 and s[i]==s[j]) dp[i][j]=2;
            else if(s[i]==s[j]){
                dp[i][j]=dp[i+1][j-1]+2;
            }
            else dp[i][j]=max(dp[i+1][j],dp[i][j-1]);
        }
    }
    return dp[0][n-1];
    
}

int main()
{
    char seq[] = "GEEKS FOR GEEKS";
    int n = strlen(seq);
    printf ("The length of the LPS is %d", lps(seq));
    getchar();
    return 0;
}
