//find shortest cycle in undirected graph
// key concept is back edge and using bfs
//and to detect all the cycles bfs traversing for all node as src is to be done
// and then find the min length cycle 
/*
There is a cycle in a graph only if there is a back edge present in the graph. 
A back edge is an edge that is joining a node to itself (self-loop) or one of 
its ancestor in the tree produced by DFS. 
To find the back edge to any of its ancestor keep a visited array and if there 
is a back edge to any visited node then there is a loop and return true.
*/
#include <bits/stdc++.h>
using namespace std;
#define N 100005
vector<int> adj[N];

void bfs(int src,int n,int &ans){
    vector<int> dist(n+1,INT_MAX);
    queue<int> q;
    q.push(src);
    dist[src]=0;
    while(!q.empty()){
        int curr=q.front();
        q.pop();
        for(auto nbr:adj[curr]){
            if(dist[nbr]==INT_MAX){
                // neighbour not visited
                q.push(nbr);
                dist[nbr]=1+dist[curr];
            }
            else{
                if(dist[nbr]>=dist[curr]){
                    // backedge is encountered
                    ans=min(ans,dist[curr]+dist[nbr]+1);
                }

            }
        }
    }
}


int main(){
    int n,m;
    cin>>n>>m;
    for(int i=0;i<m;i++){
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    int ans=n+1;
    for(int i=1;i<=n;i++) bfs(i,n,ans);
    ans==n+1? cout<<"cycle is not present"<<endl : cout<<"shortest cycle length = "<<ans<<endl;

    return 0;
}

/*
TC
5 6
1 2
1 3
2 4
2 5
4 5
5 3
shortest cycle len=3

*/
