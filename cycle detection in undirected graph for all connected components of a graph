//using concept that Cycle is present - If a neighbour node of curr node is visited and nbr node is not the parent of curr node 


#include <bits/stdc++.h>
using namespace std;

class Graph{
    int V;
    list<int> *adj;
    bool dfsHelper(int node,bool visited[],int parent);
    public:
    // constructor
        Graph(int v){
            this->V=v;
            adj=new list<int>[V];
        }
        void addEdge(int u,int v);
        bool isCyclic(); // updated implementation of dfs
        void printList(); // to print the current list
};

void Graph::addEdge(int u,int v){
    adj[u].push_back(v);
    adj[v].push_back(u);
}

bool Graph::dfsHelper(int node,bool visited[],int parent){
    // mark the current node as visited
    visited[node]=true;
    for(auto nbr:adj[node]){
        // If an adjacent vertex is not visited,
		//then recur for that adjacent
        if(!visited[nbr]){
            bool cycle_mila=dfsHelper(nbr,visited,node);
            if(cycle_mila) return true;
        }
        // If an adjacent vertex is visited and
		// is not parent of current vertex,
		// then there exists a cycle in the graph.
        else if(nbr!=parent){
            return true;
        }
    }
    return false;
}

bool Graph::isCyclic(){
    bool *visited=new bool[V];
    // initially mark all the nodes as unvisited
    for(int i=0;i<V;i++) visited[i]=false;
    //recursively check for all node if there exist cycle in undirected graph
    // if cycle present return true;
    for(int i=0;i<V;i++){
        if(!visited[i]){
            if(dfsHelper(i,visited,-1)) return true;
        }
    }
    //if not present return false 
    return false;
}

void Graph::printList(){
    for(int i=0;i<V;i++){
        list<int>::iterator x;
        cout<<"adj["<<i<<"]-> ";
        for(x=adj[i].begin();x!=adj[i].end();++x) cout<<*x<<" ";
        cout<<endl;
    }
    return;
}

int main(){
    Graph g1(5);
    g1.addEdge(1, 0);
	g1.addEdge(0, 2);
	g1.addEdge(2, 1);
	g1.addEdge(0, 3);
	g1.addEdge(3, 4);
    g1.printList();
    g1.isCyclic()? cout<<"Cycle is present"<<endl : cout<<"cycle is not present"<<endl;
    Graph g2(3);
	g2.addEdge(0, 1);
	g2.addEdge(1, 2);
    g2.printList();
    g2.isCyclic()? cout<<"Cycle is present"<<endl : cout<<"cycle is not present"<<endl;
    return 0;
}

