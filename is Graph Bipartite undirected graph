//conditions for graph to be a bipartite for undirected graph using dfs
// we can also use bfs
// for directed graph remove reverse edge
//Either the graph contains a cycle and cycle have odd numbers of nodes
// two neighbouring nodes has same colour 
//case1. if nbr is not the parent of that node and nbr is visited
//case2. and also nbr color is same as it's parent
#include <bits/stdc++.h>
using namespace std;

class Graph{
    int V;
    list<int> *adj;
    bool dfsHelper(int node,int *visited,int parent,int color);
    public:
        Graph(int v){
            this->V=v;
            adj=new list<int>[V];
        }
        void addEdge(int u,int v);
        bool isBipartite();
        void printList();
};
void Graph::addEdge(int u,int v){
    adj[u].push_back(v);
    adj[v].push_back(u);
}

bool Graph::dfsHelper(int node,int *visited,int parent,int color){
    // mark as visited 
    //here 0 means not visited while 1 and 2 means visited with respect color
    visited[node]=color; 
    //if(color==1) color=2;
    //else color=1; // or we can also flip color by passing (3-color) 
    for(auto nbr:adj[node]){
        if(visited[nbr]==0){
            bool c=dfsHelper(nbr,visited,node,3-color);
            // if it is not bipartite return false to it's parent node
            if(!c) return false;
        }
        //case1. if nbr is not the parent of that node 
        //case2. and also nbr color is same as it's parent
        else if(nbr!=parent and visited[nbr]==color) return false;

    }
    return true;
}
bool Graph::isBipartite(){
    int visited[V]={0};
    int color=1;
    bool ans=dfsHelper(0,visited,-1,color);
    for(int i=0;i<V;i++) cout<<i<<"-colour: "<<visited[i]<<endl;
    return ans;
}
void Graph::printList(){
    for(int i=0;i<V;i++){
        list<int>::iterator x;
        cout<<"adj["<<i<<"]-> ";
        for(x=adj[i].begin();x!=adj[i].end();++x) cout<<*x<<" ";
        cout<<endl;
    }
    return;
}


int main(){
    int n,m;
    cin>>n>>m;
    Graph g(n);
    for(int i=0;i<m;i++){
        int u,v;
        cin>>u>>v;
        g.addEdge(u, v);
    }
    g.printList();
    g.isBipartite()? cout<<"Graph is Bipartite"<<endl : cout<<"Graph is not Bipartite"<<endl;
    return 0;
}

/*
TC
5 4
0 1
0 2
1 3
2 4
bipartite
6 5
0 1
1 2
2 3
3 4
4 5
5 1
bipartite
6 5
0 1
1 2
2 3
3 4
4 5
5 0
bipartite
5 5
0 1
1 2
2 3
3 4
4 0
not bipartite

*/
