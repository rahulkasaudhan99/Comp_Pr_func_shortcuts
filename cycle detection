//in undirected graph for all connected components of a graph
//using concept that Cycle is present - If a neighbour node of curr node is visited and nbr node is not the parent of curr node 


#include <bits/stdc++.h>
using namespace std;

class Graph{
    int V;
    list<int> *adj;
    bool dfsHelper(int node,bool visited[],int parent);
    public:
    // constructor
        Graph(int v){
            this->V=v;
            adj=new list<int>[V];
        }
        void addEdge(int u,int v);
        bool isCyclic(); // updated implementation of dfs
        void printList(); // to print the current list
};

void Graph::addEdge(int u,int v){
    adj[u].push_back(v);
    adj[v].push_back(u);
}

bool Graph::dfsHelper(int node,bool visited[],int parent){
    // mark the current node as visited
    visited[node]=true;
    for(auto nbr:adj[node]){
        // If an adjacent vertex is not visited,
		//then recur for that adjacent
        if(!visited[nbr]){
            bool cycle_mila=dfsHelper(nbr,visited,node);
            if(cycle_mila) return true;
        }
        // If an adjacent vertex is visited and
		// is not parent of current vertex,
		// then there exists a cycle in the graph.
        else if(nbr!=parent){
            return true;
        }
    }
    return false;
}

bool Graph::isCyclic(){
    bool *visited=new bool[V];
    // initially mark all the nodes as unvisited
    for(int i=0;i<V;i++) visited[i]=false;
    //recursively check for all node if there exist cycle in undirected graph
    // if cycle present return true;
    for(int i=0;i<V;i++){
        if(!visited[i]){
            if(dfsHelper(i,visited,-1)) return true;
        }
    }
    //if not present return false 
    return false;
}

void Graph::printList(){
    for(int i=0;i<V;i++){
        list<int>::iterator x;
        cout<<"adj["<<i<<"]-> ";
        for(x=adj[i].begin();x!=adj[i].end();++x) cout<<*x<<" ";
        cout<<endl;
    }
    return;
}

int main(){
    Graph g1(5);
    g1.addEdge(1, 0);
	g1.addEdge(0, 2);
	g1.addEdge(2, 1);
	g1.addEdge(0, 3);
	g1.addEdge(3, 4);
    g1.printList();
    g1.isCyclic()? cout<<"Cycle is present"<<endl : cout<<"cycle is not present"<<endl;
    Graph g2(3);
	g2.addEdge(0, 1);
	g2.addEdge(1, 2);
    g2.printList();
    g2.isCyclic()? cout<<"Cycle is present"<<endl : cout<<"cycle is not present"<<endl;
    return 0;
}

//in Directed Graph
//using the concept of back edge add the node which is traversed and currently in the path and remove the nodes which is returned from current path
//topological sort using BFS
//key idea is to maintain two boolean array or map as per requirement 
#include<bits/stdc++.h>
using namespace std;
class Graph{
    int V;
    list<int> *adj;
    public:
        Graph(int v){
            this->V=v;
            adj=new list<int>[V];
        }
        void addEdge(int u,int v){
            //directed graph
            adj[u].push_back(v);
        }
        bool cycleHelper(int node,bool *visited,bool *stackk){
            visited[node]=true;
            stackk[node]=true;
            for(auto nbr:adj[node]){
                if(stackk[nbr]) return true;
                else if(!visited[nbr]){
                    bool cycle_mila=cycleHelper(nbr,visited,stackk);
                    if(cycle_mila) return true;
                }
            }
            // returning point 
            // removed from current path i.e leave a node from path
            stackk[node]=false;
            // no cycle foound
            return false;
        }
        bool isCycle(){
            bool *stackk=new bool[V]; //stack to check if this vertex is in path or not
            bool *visited=new bool[V];
            for(int i=0;i<V;i++) visited[i]=false;
            for(int i=0;i<V;i++) stackk[i]=false;
            return cycleHelper(0,visited,stackk);
        }
};

int main(){
    Graph g(7);
	g.addEdge(0,1);
	g.addEdge(1,2);
	g.addEdge(2,3);
	g.addEdge(3,4);
	g.addEdge(4,5);
	g.addEdge(1,5);
    g.addEdge(5,6);
    g.addEdge(4,2);  //backedge if we remove it it will give Cycle is not found
    g.isCycle()? cout<<"Cycle is found"<<endl : cout<<"Cycle is not found"<<endl;
    return 0;
}
