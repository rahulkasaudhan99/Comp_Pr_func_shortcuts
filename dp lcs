#include<bits/stdc++.h>
using namespace std;

typedef long long ll;

int lcs(string s1, string s2,int i,int j,vector<vector<int>> &dp){
    //base case
    if(i==s1.length() || j==s2.length()) return 0;
    //if a n is already computed
    if(dp[i][j]!=-1) return dp[i][j];
    //recursive case compute only if dp[n] is not computed already
    if(s1[i]==s2[j]) return dp[i][j]=1+lcs(s1,s2,i+1,j+1,dp); 

    int op1=lcs(s1,s2,i+1,j,dp);
    int op2=lcs(s1,s2,i,j+1,dp);

    return dp[i][j]=max(op1,op2);
}


int main() {
	string s1,s2;
    s1="ABCD";
    s2="ABEDG";
    int n1,n2;
    n1=s1.length();
    n2=s2.length();
    vector<vector<int>> dp(n1,vector<int> (n2,-1));  // dp vector of n1 rows of type vector<int> having n2 no of elements initialised with val=-1
    cout<<lcs(s1,s2,0,0,dp)<<endl;
    
	return 0;
}


/*




*/
