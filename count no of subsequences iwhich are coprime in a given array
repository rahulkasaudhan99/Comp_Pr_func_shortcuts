    // co-primes subsequences - GCD of all elements=1 
    
    int N=100001;
    vector<int> mobius(N);
    vector<int> countpr(N);
    vector<int> v(N,1);
    
    void mobiusFunc(){
        int i=0,j=0;
        for(i=2;i<N;i++){
            if(countpr[i]) continue;
            for(j=i;j<N;j+=i){
                countpr[j]++;
                v[j]*=i;
            }
        }
        for(int i=1;i<N;i++){
            if(v[i]==i){
                if(countpr[i]&1) mobius[i]=-1;
                else mobius[i]=1;
            }
            else mobius[i]=0;
        }
    }
    
    vector<int> power(N+1);
    
    int32_t main() {
    
        ios_base::sync_with_stdio(false);
        cin.tie(NULL) ; cout.tie(NULL) ;

        mobiusFunc();
        power[0]=1;
        for(int i=1;i<N;i++){
            power[i]=power[i-1]*2;
            power[i]%=MOD;
        }
        
        int n;
        cin>>n;
        vector<int> freq(N+1,0);
        int ans=0;
        for(int i=0;i<n;i++) {
            int z;
            cin>>z;
            freq[z]++;
        }
        // count how many multiples are there in array of no i
        for(int i=1;i<N;i++){
            int count=0;
            for(int j=i;j<N;j+=i){
                count+=freq[j];
            }
            ans+=mobius[i]*(power[count]-1);
            ans%=MOD;
        }
        ans+=MOD;
        cout<<ans%MOD<<endl;
        

    
        return 0 ;
    
    }
