/*  
//Find dist and print shortest path
//Dijkstra don't work on -ve wt edge for both directed and undirected graph
//Bellman ford complexity- O(V*E)               Dijkstra- O(V*V)  BUT  O(V+Elog(V)) with min priority queue or set  

//Bellman Ford works if (no -ve wt edge and undirected graph)  or (directed graph with -ve edge but no -ve cycle)
//undirected graph with -ve wt edge will always have -ve wt cylce  if edge 1->2(-2) also there is edge  2->1(-2)

//using set stl reduce time complexity to O(ElogV) from O(V*V)
// Insert source itself in Set and initialize its
// distance as 0.
//setds.insert(make_pair(0, src));
*/

#include<bits/stdc++.h>
using namespace std;

int minDist(vector<int>& dist,vector<bool> &visited,int V){
    int mini=INT_MAX,minIndex;
    for(int i=0;i<V;i++){
        if(!visited[i] && mini>=dist[i]) mini=dist[i],minIndex=i;
    }
    return minIndex;
}

//define parent in int main and pass to this func by ref to get the path once shortestPathGraph calculated
void dijkstraShortestPath(vector<vector<int>> &graph,int src,int V){
    vector<int> dist(V,INT_MAX);
    vector<bool> visited(V,false);
    //parent array to get the minDist path from src to each vertex
    vector<int> parent(V,-1);
    dist[src]=0;
    //find shortest path for V-1 vertices
    for(int i=0;i<V-1;i++){
        int u=minDist(dist,visited,V);
        visited[u]=true;
        for(int v=0;v<V;v++){
            //if we go from u to v graph[u][v]!=0 i.e no edge here dist(src to u)+dist[u to v]<dist[v]
            // if dist src to v as of now > dist(src to u)+dist[u to v]
            if(!visited[v] && graph[u][v] && dist[u]!=INT_MAX && dist[u]+graph[u][v]<dist[v]){
                dist[v]=dist[u]+graph[u][v];
                //update the parentof v now as u
                parent[v]=u;
            }
        }
    }
    //print shortestPath from src to each vertices
    for(int i=0;i<V;i++){
        int v=i;
        while(parent[v]!=-1){
            cout<<v<<" <- ";
            v=parent[v];
        }
        cout<<"0 dist = "<<dist[i]<<endl;
    }
    return;
}


int main(){
    int n;
    cin>>n;
    //vector<vector<int>> graph(n,vector<int> (n,0));
    vector<vector<int>>  graph{ { 0, 4, 0, 0, 0, 0, 0, 8, 0 },
                                { 4, 0, 8, 0, 0, 0, 0, 11, 0 },
                                { 0, 8, 0, 7, 0, 4, 0, 0, 2 },
                                { 0, 0, 7, 0, 9, 14, 0, 0, 0 },
                                { 0, 0, 0, 9, 0, 10, 0, 0, 0 },
                                { 0, 0, 4, 14, 10, 0, 2, 0, 0 },
                                { 0, 0, 0, 0, 0, 2, 0, 1, 6 },
                                { 8, 11, 0, 0, 0, 0, 1, 0, 7 },
                                { 0, 0, 2, 0, 0, 0, 6, 7, 0 } };
    dijkstraShortestPath(graph,0,9);
    return 0;
}



/*
Output
0 dist = 0
1 <- 0 dist = 4
2 <- 1 <- 0 dist = 12
3 <- 2 <- 1 <- 0 dist = 19
4 <- 5 <- 6 <- 7 <- 0 dist = 21
5 <- 6 <- 7 <- 0 dist = 11
6 <- 7 <- 0 dist = 9
7 <- 0 dist = 8
8 <- 2 <- 1 <- 0 dist = 14

*/
