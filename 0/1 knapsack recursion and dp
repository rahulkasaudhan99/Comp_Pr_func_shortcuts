//simple recursion 

#include <bits/stdc++.h>
using namespace std;
int knapsack(vector<int> &wt,vector<int> &pr,int currItem,int w){
    if(currItem==wt.size() || w==0){
        return 0;
    }
    //including curr item
    int ans=0;
    int inc=INT_MIN;
    int exc=INT_MIN;
    if(w>=wt[currItem]) inc=pr[currItem]+knapsack(wt,pr,currItem+1,w-wt[currItem]);
    exc=knapsack(wt,pr,currItem+1,w);  
    ans=max(exc,inc);
    return ans;
}
int main() {
    int n;
    cin>>n;
    int w;
    vector<int> wt(n),pr(n);
    for(int i=0;i<n;i++) cin>>wt[i];
    for(int i=0;i<n;i++) cin>>pr[i];
    cin>>w;
    cout<<knapsack(wt,pr,0,w)<<endl;
}


//using memoization i.e dp array
int knapSack(int W, int wt[], int val[], int n)
{
    int i, w;
    int K[n + 1][W + 1];
 
    // Build table K[][] in bottom up manner
    for(i = 0; i <= n; i++)
    {
        for(w = 0; w <= W; w++)
        {
            if (i == 0 || w == 0)
                K[i][w] = 0;
            else if (wt[i - 1] <= w)
                K[i][w] = max(val[i - 1] +
                                K[i - 1][w - wt[i - 1]],
                                K[i - 1][w]);
            else
                K[i][w] = K[i - 1][w];
        }
    }
    return K[n][W];
}
