We will start with two indices i and j. i pointing to the two middle elements 
(or pointing to two elements around the middle element in case of n being odd). We one by one move i and j away from each other.
Step 1. Initially, ignore the part of left side which is same as the 
corresponding part of right side. For example, if the number is “8 3 4 2 2 4 6 9″, we ignore the middle four elements. 
i now points to element 3 and j now points to element 6.

Step 2. After step 1, following cases arise:
Case 1: Indices i & j cross the boundary. 
This case occurs when the input number is palindrome. In this case, we just add 1 to the middle digit (or digits in case n is even) 
propagate the carry towards MSB digit of left side and simultaneously copy mirror of the left side to the right side. 
For example, if the given number is “1 2 9 2 1”, we increment 9 to 10 and propagate the carry. So the number becomes “1 3 0 3 1”

Case 2: There are digits left between left side and right side which are not same. So, we just mirror the left side to the right side &
try to minimize the number formed to guarantee the next smallest palindrome. 
In this case, there can be two sub-cases. 

2.1) Copying the left side to the right side is sufficient, we don’t need to increment any digits and the result is
just mirror of left side. Following are some examples of this sub-case. 
Next palindrome for “7 8 3 3 2 2″ is “7 8 3 3 8 7” 
Next palindrome for “1 2 5 3 2 2″ is “1 2 5 5 2 1” 
Next palindrome for “1 4 5 8 7 6 7 8 3 2 2″ is “1 4 5 8 7 6 7 8 5 4 1” 
How do we check for this sub-case? All we need to check is the digit just after the ignored part in step 1. This digit 
is highlighted in above examples. If this digit is greater than the corresponding digit in right side digit, then copying the 
left side to the right side is sufficient and we don’t need to do anything else.

2.2) Copying the left side to the right side is NOT sufficient. This happens when the above defined digit of left side is smaller. 
Following are some examples of this case. 
Next palindrome for “7 1 3 3 2 2″ is “7 1 4 4 1 7” 
Next palindrome for “1 2 3 4 6 2 8″ is “1 2 3 5 3 2 1” 
Next palindrome for “9 4 1 8 7 9 7 8 3 2 2″ is “9 4 1 8 8 0 8 8 1 4 9” 
We handle this subcase like Case 1. We just add 1 to the middle digit (or digits in case n is even) propagate the carry towards MSB 
digit of left side and simultaneously copy mirror of the left side to the right side.

#include<bits/stdc++.h>
using namespace std;

//check for all 9 
bool checkAll9(int *arr,int n){
    for(int i=0;i<n;i++){
        if(arr[i]!=9) return false;
    }
    return true;
}

void smallestPalindrome(int *a,int n){
    //splitting from half
    int mid=n/2;
    int i=mid-1,j;
    if(n%2==0){
        j=mid;
    }
    else j=mid+1;
    //exclude all equal pattern from mid to both left and right
    while(i>=0){
        if(a[i]==a[j]){
            i--;
            j++;
        }
        else break;
    }
    bool leftsmaller=false;
    //check if left side is smaller than right side
    if(i<0 || a[i]<a[j]) leftsmaller=true;
    //case when already a palindrome i<0
    //check for two cases
    //if right side greater than left side
    if(leftsmaller){
        i=mid-1;
        int carry=1;
        // case like Next palindrome for “94187978322″ is “94188088149” 
        if(n%2==1){
            a[mid]+=carry;
            carry=a[mid]/10;
            a[mid]=a[mid]%10;
            j=mid+1;
        }
        else j=mid;
        while(i>=0){
            a[i]+=carry;
            carry=a[i]/10;
            a[i]=a[i]%10;
            a[j]=a[i]; // copy this left side in reversed order to right side
            i--;
            j++;
        }
    }
    
    //if right is less than left side
    //simply copy left on right side
}


int main(){
    int a[]={ 9, 4, 1, 8, 7, 9, 7, 8, 3, 2, 2 };
    int n=sizeof(a)/sizeof(a[0]);
    if(checkAll9(a,n)){
        cout<<1<<" ";
        for(int i=0;i<n-1;i++) cout<<0<<" ";
        cout<<1<<endl;
    }
    else{
        smallestPalindrome(a,n);
        for(int i=0;i<n;i++) cout<<a[i]<<" ";
        cout<<endl;
    }
    
    return 0;
}
