//0-1 knapsack usind memoization and tabular method
#include<bits/stdc++.h>
using namespace std;


//tabulation method
int knapsackTab(int *val,int *wt,int W,int n){
    int dp[n+1][W+1];
    for(int i=0;i<=n;i++){
        for(int w=0;w<=W;w++){
            if(i==0 || w==0) dp[i][w]=0;
            else if(wt[i-1]<=w){
                dp[i][w]=max(dp[i-1][w],val[i-1]+dp[i-1][w-wt[i-1]]);
            }
            else dp[i][w]=dp[i-1][w];
        }
    }
    return dp[n][W];
}
//memoization method
int knapsackMem(int *val,int *wt,int n,int W,vector<vector<int>> &dp){
    //base case
    if(n<0) return 0;
    //checking if value is already computed
    if(dp[n][W]!=-1) return dp[n][W];
    
    if(wt[n]>W){
        dp[n][W]=knapsackMem(val,wt,n-1,W,dp);
        return dp[n][W];
    }
    else{
        dp[n][W]=max(val[n]+knapsackMem(val,wt,n-1,W-wt[n],dp) , knapsackMem(val,wt,n-1,W,dp));
        return dp[n][W];
    }
}

int main(){
    int val[]={60,100,120};
    int wt[]={10,20,30};
    int W=50;
    int n=3;
    vector<vector<int>> dp(n,vector<int>(W+1,-1));
    cout<<knapsackMem(val,wt,n-1,W,dp)<<endl;
    cout<<knapsackTab(val,wt,W,n)<<endl;
    //output=220
    return 0;
}





//Unbounded Knapsack (Repetition of items allowed)
/*
Given an integer W, arrays val[] and wt[], where val[i] and wt[i] are the values and weights of the ith item, the task is to calculate the maximum value that can be obtained using weights not exceeding W.
Note: Each weight can be included multiple times.
here we are allowed to use unlimited number of instances of an item.
*/
#include<bits/stdc++.h>
using namespace std;

int knapsackUnbounded(int *val,int *wt,int n,int W,vector<int> &dp){
    for(int i=0;i<=W;i++){
        for(int j=0;j<n;j++){
            if(wt[j]<=i) dp[i]=max(dp[i],dp[i-wt[j]]+val[j]);
        }
    }
    return dp[W];
}

int main(){
    int val[]={10,30,20};
    int wt[]={5,10,15};
    int W=100;
    int n=3;
    vector<int> dp(W+1,0);
    cout<<knapsackUnbounded(val,wt,n-1,W,dp)<<endl;
    //output=300
    return 0;
}

